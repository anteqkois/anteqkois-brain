{"index":{"title":"Welcome to Antoni's Kois digital garden 🧠","links":[],"tags":[],"content":"It’s a space to collect my notes and create simple blog posts.\nThe mainly covered topics are:\n\nprograming related to\n\nfrontend\nbackend\ndevops\nweb3\nblochchain\nai\nautomations\n\n\ninvesting and build wealth\n\ncryptocurrency\ntrading\nhodl\nbots\n\n\ngym\nself development\n\nHave a nice day ! 🫶 🫡"},"investing/cryptocurrency/storj":{"title":"Storj","links":[],"tags":["investing","cryptocurrency","projects"],"content":"Check this project before bullrun and to invest HODL\nOfficial webpage"},"media/ai-prompts":{"title":"AI Prompts to simplyfy my daily tasks","links":[],"tags":["ai","prompt"],"content":"Post for linkedin\nYour task is to create a simple post for LinkedIn from the provided markdown content. It should be catchy, interesting, easy to understand, and at the beginning, start with a brief introduction.\nSpecial output formatting:\nText render environment only supports Unicode and emoji\nUse symbols from Unicode’s Mathematical Alphanumeric Symbols block liberally to produce facsimiles of bold, italics, and other formatting. Examples:\nitalics sans: 𝘛𝘩𝘦 𝘘𝘶𝘪𝘤𝘬 𝘉𝘳𝘰𝘸𝘯 𝘍𝘰𝘹 𝘑𝘶𝘮𝘱𝘦𝘥 𝘖𝘷𝘦𝘳 𝘵𝘩𝘦 𝘭𝘢𝘻𝘺 𝘥𝘰𝘨.\nbold sans: 𝗧𝗵𝗲 𝗤𝘂𝗶𝗰𝗸 𝗕𝗿𝗼𝘄𝗻 𝗙𝗼𝘅 𝗝𝘂𝗺𝗽𝗲𝗱 𝗢𝘃𝗲𝗿 𝘁𝗵𝗲 𝗹𝗮𝘇𝘆 𝗱𝗼𝗴.\nbold italic sans: 𝙏𝙝𝙚 𝙌𝙪𝙞𝙘𝙠 𝘽𝙧𝙤𝙬𝙣 𝙁𝙤𝙭 𝙅𝙪𝙢𝙥𝙚𝙙 𝙊𝙫𝙚𝙧 𝙩𝙝𝙚 𝙡𝙖𝙯𝙮 𝙙𝙤𝙜.\nitalics serif: 𝑇ℎ𝑒 𝑄𝑢𝑖𝑐𝑘 𝐵𝑟𝑜𝑤𝑛 𝐹𝑜𝑥 𝐽𝑢𝑚𝑝𝑒𝑑 𝑂𝑣𝑒𝑟 𝑡ℎ𝑒 𝑙𝑎𝑧𝑦 𝑑𝑜𝑔.\nHere is the mentioned markdown content:"},"programing/axios/cancel-pending-request":{"title":"Cancel pending request","links":[],"tags":["dev","axios","optymalization"],"content":"VueJS\nSimple vueJS hook to handle request cancelation when new config was provided\nimport axios, { AxiosRequestConfig, AxiosResponse } from &#039;axios&#039;;\nimport { ref } from &#039;vue&#039;;\n \nexport const useAxios = () =&gt; {\n  // store tokens here to prevent re-usage token for requests from two different places\n  const requestAbortController = ref&lt;AbortController&gt;();\n \n  const withCancelation = &lt;T&gt;(\n    config: AxiosRequestConfig&lt;T&gt;\n  ): Promise&lt;AxiosResponse&lt;T&gt;&gt; =&gt; {\n    if (requestAbortController.value)\n      requestAbortController.value.abort(`Cancel due to re-request data`);\n \n    requestAbortController.value = new AbortController();\n \n    return axios({ ...config, signal: requestAbortController.value.signal });\n  };\n \n  return { withCancelation };\n};\nThen simple call inside your bussines logic\nconst { data } = await withCancelation&lt;{\n  data: DataResource[];\n  cursor: string;\n}&gt;({\n  method: &#039;GET&#039;,\n  url: `${API_URL}/data-aggregator`,\n  params: {\n    ...filter,\n    limit: limit.value,\n    cursor: cursor.value,\n    lang: locale.value,\n  },\n});"},"programing/databases/mongodb-replicaset":{"title":"MongoDb Replica Set","links":[],"tags":["dev","database","mongodb","replicaset","devops"],"content":"Commands to create local mongo replica set\nRun docker compose (first time, run with environments MONGO_INITDB_ROOT_PASSWORD etc to create admin. On the linux server they are not always properly readed for no reason… After initializing mongo, remove environments from compose file)\ndocker compose up -d\n\nIt problems with auth file access, check: Keyfile Access\nor use trick with entrypoint:\nentrypoint:\n  - bash\n  - -c\n  - |\n      chmod 400 /etc/mongo/authKey\n      chown 999:999 /etc/mongo/authKey\n      exec docker-entrypoint.sh &quot;$@&quot;\n\nLogin as a admin\ndocker exec -it mongodb mongo --host mongodb:27017 -u admin -p &lt;password&gt; --authenticationDatabase admin\n\nSetup replica set config (add secondary database)\nconfig = {\n      &quot;_id&quot; : &quot;rs0&quot;,\n      &quot;members&quot; : [\n        {\n          &quot;_id&quot; : 0,\n          &quot;host&quot; : &quot;mongodb:27017&quot;,\n\t\t\t\t\t&quot;priority&quot; : 2\n        },\n        {\n          &quot;_id&quot; : 1,\n          &quot;host&quot; : &quot;mongodb2:27017&quot;,\n\t\t\t\t\t&quot;priority&quot; : 1\n        },\n      ]\n      };\n\nInitialize cluster\nrs.initiate(config);\n\nAdd new node to existing replica set\nrs.add(&quot;mongodb2:27017&quot;)\n\nCheck current config\nrs.conf()\n\nChange replica set config by just assign new config (would be better the hosts to be DNS host then ip addresses)\nuse local;\n\nconfig = {\n      &quot;_id&quot; : &quot;rs0&quot;,\n      &quot;members&quot; : [\n        {\n          &quot;_id&quot; : 0,\n          &quot;host&quot; : &quot;&lt;ip/host&gt;:27017&quot;,\n\t\t\t\t\t&quot;priority&quot; : 2\n        },\n        {\n          &quot;_id&quot; : 1,\n          &quot;host&quot; : &quot;&lt;ip/host&gt;:27018&quot;,\n\t\t\t\t\t&quot;priority&quot; : 1\n        },\n      ]\n      };\n\nrs.reconfig(config);\n\nHow to connect:\nYou must use directConnection=true connection option\nmongodb://order-book-alts:&lt;password&gt;@mongodb:27017/on_chain_data?replicaSet=rs0&amp;authSource=admin&amp;directConnection=true\n"},"programing/databases/mysql-binary-log":{"title":"MySQL Binary Log","links":[],"tags":["dev","databse","sql","mysql"],"content":"MySQL Binary Log is often used to append watchers on the table changes. I used it to react on new insert on the separate service (it can be also achieved using event pattern)\nStorage\nOne of drawback is storage. Day by day it get a much space and from some point server can start thrownig error that there is no space on disk. So we must find sollution to clear periodically old Binary Log entries.\nYou can check logs using SHOW BINARY LOGS\nMySQL statamenet to delete logs\nPURGE BINARY LOGS {\n    TO &#039;log_name&#039;\n  | BEFORE datetime_expr\n}\n\nUsage example\nPURGE BINARY LOGS TO &#039;mysql-bin.010&#039;;\nPURGE BINARY LOGS BEFORE &#039;2019-04-02 22:46:26&#039;;\n\nDon’t delete raw files form using linux commands etc:\n\nPURGE BINARY LOGS TO and PURGE BINARY LOGS BEFORE both fail with an error when binary log files listed in the .index file had been removed from the system by some other means (such as using rm on Linux). (Bug #18199, Bug #18453) To handle such errors, edit the .index file (which is a simple text file) manually to ensure that it lists only the binary log files that are actually present, then run again the PURGE BINARY LOGS statement that failed.\n\nDelete logs\nYou can use set binlog_expire_logs_seconds system veriabel, default is 30 days (2592000).\nWhen thee are deleted:\n\nAfter their expiration period ends, binary log files can be automatically removed. Possible removals happen at startup and when the binary log is flushed\n\nWhen the logs are flushing:\nThe server creates a new file (for binary log) in the series each time any of the following events occurs:\n\nThe server is started or restarted\nThe server flushes the logs.\nThe size of the current log file reaches max_binlog_size.\n\nWhen the logs are flusing:\n\nLog flushing occurs when you issue a FLUSH LOGS statement; execute mysqladmin with a flush-logs or refresh argument; or execute mysqldump with a —flush-logs option […]. In addition, the binary log is flushed when its size reaches the value of the max_binlog_size system variable.\n\nSo change the binlog_expire_logs_seconds and it will do the job. You can check current veriable value using SHOW VARIABLES LIKE &#039;binlog_expire_logs_seconds&#039;. Here is command to change veriable value: SET GLOBAL binlog_expire_logs_seconds = 259200;"},"programing/databases/mysql-watch-changes":{"title":"Watch MySQL database changes","links":["programing/databases/mysql-binary-log"],"tags":["dev","databse","sql","mysql"],"content":"To watch for changes in MySQL database tables you can use my forked package zongji which use binary logs to retrive changes.\nSimple TypeScript usage\nconst connectionConfig: mysql.PoolOptions = {\n  port: process.env.PORT as unknown as number,\n  host: process.env.HOST,\n  user: process.env.USER,\n  password: process.env.PASSWORD,\n  database: process.env.DB_NAME,\n  queueLimit: 0,\n  enableKeepAlive: true,\n  keepAliveInitialDelay: 0,\n  connectionLimit: 5,\n}\n \nconst altcoinWatcher = new ZongJi(connectionConfig)\n \nconst handleChangeInAltcoinsStream() {\n  return async (event: ZongJiEvent) =&gt; {\n    // bussines logic\n  }\n}\n \naltcoinWatcher.on(&#039;binlog&#039;, handleChangeInAltcoinsStream())"},"programing/docker/fresh-restart":{"title":"Fresh restart docker compose with new env","links":[],"tags":["dev","docker","docker-compose","devops"],"content":"When service runs and you want to restart it but with changed envirnment veriables just use docker compose up -d, it will discover that veriables were changed and will recreate container with new."},"programing/linux/nano":{"title":"Rarely used nano commands","links":[],"tags":["dev","linux","nano","command"],"content":"It’s a bit hard to remember, so here is commands whihc can be usefull for nano\n\ncontrol + \\ then control + y to go to the top of the file\ncontrol + 6 mark/unmark\n\ncontrol + k delete market content\ncontrol + k delete market content\n\n\n"},"programing/linux/ssh-change-disconnect":{"title":"Change SSH disconnect idle settings","links":[],"tags":["dev","linux","ssh"],"content":"On Linux or MacOS\nEdit ssh config nano ~/.ssh/config or add when not exists.\nAdd following config properties\nHost *\n    ServerAliveInterval 60\n    ServerAliveCountMax 8\n\nServerAliveInterval - Will send a keepalive message to server every x seconds to stay connected to it\nServerAliveCountMax - How many missing responses form server can be before quiet connection. Default value is 3.\nIf you set ServerAliveInterval to 60 and leave ServerAliveCountMax as it is, this means the keepalive will only wait for 3 * 60 = 180 seconds =  3 minutes before quiting."},"programing/nest/websocket-auth":{"title":"Auth for NestJS WebSocket connection","links":["tags/𝙉𝙚𝙨𝙩𝙅𝙎","tags/𝙒𝙚𝙗𝙎𝙤𝙘𝙠𝙚𝙩","tags/𝙎𝙚𝙘𝙪𝙧𝙞𝙩𝙮","tags/𝘼𝙪𝙩𝙝","tags/𝙅𝙒𝙏","tags/𝘾𝙤𝙙𝙞𝙣𝙜"],"tags":["dev","nestjs","websocket","auth","security","passportjs","𝙉𝙚𝙨𝙩𝙅𝙎","𝙒𝙚𝙗𝙎𝙤𝙘𝙠𝙚𝙩","𝙎𝙚𝙘𝙪𝙧𝙞𝙩𝙮","𝘼𝙪𝙩𝙝","𝙅𝙒𝙏","𝘾𝙤𝙙𝙞𝙣𝙜"],"content":"In NestJS WebSocket you can protect logic in few ways:\nAdd ‘CORS’ to websocket\n@WebSocketGateway({\n  cors: {\n    origin: [process.env[&#039;FRONTEND_HOST&#039;]],\n    credentials: true,\n  },\n  withCredentials: true,\n  cookie: true,\n  connectTimeout: 10_000,\n  namespace: WEBSOCKET_NAMESPACE.XYZ,\n})\nDurning handleConnection call inside websocket gateway using JWT tokens (Here is used Socekt.io for handle websocket logic)\n  handleConnection(client: Socket, ...args: any[]): void | Socket {\n    if (typeof client.handshake.headers.cookie !== &#039;string&#039;) return client.disconnect(true)\n \n    const jwtPayload = this.authService.verifyJwt(parseCookieString(client.handshake.headers.cookie)[Cookies.ACCESS_TOKEN])\n    if (!jwtPayload) return client.disconnect(true)\n \n    this.logger.log(`#handleConnection ${client.id}`)\n  }\nUsing simple NestJS Guard\n  @UseGuards(JwtCookiesWebsocketAuthGuard)\n  @UseFilters(new AllExceptionsWebsocketFilter())\n  @SubscribeMessage(WEBSOCKET_EVENT.XYZ)\n  async handleXYZEvent(@ConnectedSocket() client: Socket, @MessageBody() data: XYZWSInput) {\n    // logic...\n    client.emit(WEBSOCKET_EVENT.XYZ, response)\n  }\nJwtCookiesWebsocketAuthGuard logic with passportJS\nimport { ExecutionContext, Injectable, UnauthorizedException } from &#039;@nestjs/common&#039;\nimport { Reflector } from &#039;@nestjs/core&#039;\nimport { AuthGuard } from &#039;@nestjs/passport&#039;\nimport { Observable } from &#039;rxjs&#039;\nimport { Socket } from &#039;socket.io&#039;\nimport { IS_PUBLIC_KEY } from &#039;../decorators/public.decorator&#039;\n \n@Injectable()\nexport class JwtCookiesWebsocketAuthGuard extends AuthGuard(&#039;jwt-websocket&#039;) {\n  constructor(private reflector: Reflector) {\n    super()\n  }\n \n  override canActivate(context: ExecutionContext): boolean | Promise&lt;boolean&gt; | Observable&lt;boolean&gt; {\n    const isPublic = this.reflector.getAllAndOverride&lt;boolean&gt;(IS_PUBLIC_KEY, [context.getHandler(), context.getClass()])\n    if (isPublic) {\n      return true\n    }\n    return super.canActivate(context)\n  }\n \n  override getRequest&lt;T = any&gt;(context: ExecutionContext): T {\n    return context.switchToWs().getClient&lt;Socket&gt;().handshake as any\n  }\n \n  override handleRequest(err: any, user: any, info: any) {\n    if (err || !user) {\n      throw err || new UnauthorizedException(&#039;Invalid authorization token&#039;)\n    }\n    return user\n  }\n}\nJwtCookiesWebsocketAuthGuard logic plain NestJS\nimport { CanActivate, ExecutionContext, Injectable } from &#039;@nestjs/common&#039;;\nimport { Reflector } from &#039;@nestjs/core&#039;;\nimport { Observable } from &#039;rxjs&#039;;\nimport { Socket } from &#039;socket.io&#039;;\nimport { AuthService } from &#039;../auth.service&#039;;\nimport { MaxDataJwtToken } from &#039;../types&#039;;\n \n@Injectable()\nexport class JwtCookiesWebsocketAuthGuard implements CanActivate {\n\tconstructor(private reflector: Reflector) {}\n \n\tstatic retriveAuthPayload(client: Socket): MaxDataJwtToken | null {\n\t\tif (typeof client.handshake.headers.authorization !== &#039;string&#039;) return null;\n \n\t\t// token can be stored in headers, cookies or predevined `auth` object in socket.io handshake object\n\t\tconst token = AuthService.retriveTokenFromBearer(client.handshake.headers.authorization);\n\t\tif (!token) return null;\n \n\t\tconst jwtPayload = AuthService.decodeJwt(token);\n\t\treturn jwtPayload.sub ? jwtPayload : null;\n\t}\n \n\tcanActivate(context: ExecutionContext): boolean | Promise&lt;boolean&gt; | Observable&lt;boolean&gt; {\n\t\tconst client = context.switchToWs().getClient&lt;Socket&gt;();\n\t\tconst userPayload = JwtCookiesWebsocketAuthGuard.retriveAuthPayload(client);\n\t\treturn !!userPayload;\n\t}\n}\nAll together\nimport { Cookies, FlowRunWSInput, WEBSOCKET_EVENT, WEBSOCKET_NAMESPACE, parseCookieString } from &#039;@xyz/shared&#039;\nimport { Logger, UseFilters, UseGuards } from &#039;@nestjs/common&#039;\nimport { ConnectedSocket, MessageBody, OnGatewayConnection, OnGatewayDisconnect, SubscribeMessage, WebSocketGateway } from &#039;@nestjs/websockets&#039;\nimport { Socket } from &#039;socket.io&#039;\nimport { JwtCookiesWebsocketAuthGuard } from &#039;../../../lib/auth/guards/jwt-cookies-websocket-auth.guard&#039;\nimport { AllExceptionsWebsocketFilter } from &#039;../../../lib/nest-utils&#039;\nimport { AuthService } from &#039;../../users/auth/auth.service&#039;\n \n@WebSocketGateway({\n  cors: {\n    origin: [process.env[&#039;FRONTEND_HOST&#039;]],\n    credentials: true,\n  },\n  withCredentials: true,\n  cookie: true,\n  connectTimeout: 10_000,\n  namespace: WEBSOCKET_NAMESPACE.XYZ,\n})\nexport class WebSocketService implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(WebSocketService.name)\n \n  constructor(\n    private authService: AuthService,\n  ) {}\n \n  handleConnection(client: Socket, ...args: any[]): void | Socket {\n    if (typeof client.handshake.headers.cookie !== &#039;string&#039;) return client.disconnect(true)\n \n    const jwtPayload = this.authService.verifyJwt(parseCookieString(client.handshake.headers.cookie)[Cookies.ACCESS_TOKEN])\n    if (!jwtPayload) return client.disconnect(true)\n \n    this.logger.log(`#handleConnection ${client.id}`)\n  }\n \n  handleDisconnect(client: Socket) {\n    this.logger.log(`#handleDisconnect ${client.id}`)\n  }\n \n  @UseGuards(JwtCookiesWebsocketAuthGuard)\n  @UseFilters(new AllExceptionsWebsocketFilter())\n  @SubscribeMessage(WEBSOCKET_EVENT.XYZ)\n  async handleXYZEvent(@ConnectedSocket() client: Socket, @MessageBody() data: XYZWSInput) {\n    // logic...\n    client.emit(WEBSOCKET_EVENT.XYZ, response)\n  }\n}\nLinkedIn post content\n🚀 𝘽𝙤𝙤𝙨𝙩 𝙔𝙤𝙪𝙧 𝙉𝙚𝙨𝙩𝙅𝙎 𝙒𝙚𝙗𝙎𝙤𝙘𝙠𝙚𝙩 𝙎𝙚𝙘𝙪𝙧𝙞𝙩𝙮 🔒 Orginal Notes\n𝙎𝙚𝙘𝙪𝙧𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙒𝙚𝙗𝙎𝙤𝙘𝙠𝙚𝙩 𝙘𝙤𝙣𝙣𝙚𝙘𝙩𝙞𝙤𝙣𝙨 𝙞𝙣 𝙉𝙚𝙨𝙩𝙅𝙎 𝙞𝙨 𝙚𝙨𝙨𝙚𝙣𝙩𝙞𝙖𝙡 𝙛𝙤𝙧 𝙥𝙧𝙤𝙩𝙚𝙘𝙩𝙞𝙣𝙜 𝙮𝙤𝙪𝙧 𝙙𝙖𝙩𝙖 𝙖𝙣𝙙 𝙚𝙣𝙨𝙪𝙧𝙞𝙣𝙜 𝙩𝙝𝙚 𝙧𝙞𝙜𝙝𝙩 𝙪𝙨𝙚𝙧𝙨 𝙘𝙖𝙣 𝙘𝙤𝙣𝙣𝙚𝙘𝙩. 𝙃𝙚𝙧𝙚’𝙨 𝙝𝙤𝙬:\n1️⃣ 𝘾𝙤𝙧𝙨 𝙁𝙤𝙧 𝙒𝙚𝙗𝙎𝙤𝙘𝙠𝙚𝙩:\n@WebSocketGateway({\n  cors: {\n    origin: [process.env[&#039;FRONTEND_HOST&#039;]],\n    credentials: true,\n  },\n  withCredentials: true,\n  cookie: true,\n  connectTimeout: 10_000,\n  namespace: WEBSOCKET_NAMESPACE.XYZ,\n})\n2️⃣ 𝙅𝙒𝙏 𝘼𝙪𝙩𝙝 𝙞𝙣 𝙃𝙖𝙣𝙙𝙡𝙚𝘾𝙤𝙣𝙣𝙚𝙘𝙩𝙞𝙤𝙣:\nhandleConnection(client: Socket, ...args: any[]): void | Socket {\n  if (typeof client.handshake.headers.cookie !== &#039;string&#039;) return client.disconnect(true)\n \n  const jwtPayload = this.authService.verifyJwt(parseCookieString(client.handshake.headers.cookie)[Cookies.ACCESS_TOKEN])\n  if (!jwtPayload) return client.disconnect(true)\n \n  this.logger.log(`#handleConnection ${client.id}`)\n}\n3️⃣ 𝙐𝙨𝙚 𝙉𝙚𝙨𝙩𝙅𝙎 𝙂𝙪𝙖𝙧𝙙:\n@UseGuards(JwtCookiesWebsocketAuthGuard)\n@UseFilters(new AllExceptionsWebsocketFilter())\n@SubscribeMessage(WEBSOCKET_EVENT.XYZ)\nasync handleXYZEvent(@ConnectedSocket() client: Socket, @MessageBody() data: XYZWSInput) {\n  // logic...\n  client.emit(WEBSOCKET_EVENT.XYZ, response)\n}\n4️⃣ 𝙅𝙬𝙩𝘾𝙤𝙤𝙠𝙞𝙚𝙨𝙒𝙚𝙗𝙨𝙤𝙘𝙠𝙚𝙩𝘼𝙪𝙩𝙝𝙂𝙪𝙖𝙧𝙙 𝙬𝙞𝙩𝙝 𝙋𝙖𝙨𝙨𝙥𝙤𝙧𝙩𝙅𝙎:\n@Injectable()\nexport class JwtCookiesWebsocketAuthGuard extends AuthGuard(&#039;jwt-websocket&#039;) {\n  constructor(private reflector: Reflector) {\n    super()\n  }\n \n  override canActivate(context: ExecutionContext): boolean | Promise&lt;boolean&gt; | Observable&lt;boolean&gt; {\n    const isPublic = this.reflector.getAllAndOverride&lt;boolean&gt;(IS_PUBLIC_KEY, [context.getHandler(), context.getClass()])\n    if (isPublic) {\n      return true\n    }\n    return super.canActivate(context)\n  }\n \n  override getRequest&lt;T = any&gt;(context: ExecutionContext): T {\n    return context.switchToWs().getClient&lt;Socket&gt;().handshake as any\n  }\n \n  override handleRequest(err: any, user: any, info: any) {\n    if (err || !user) {\n      throw err || new UnauthorizedException(&#039;Invalid authorization token&#039;)\n    }\n    return user\n  }\n}\n💡 𝘼𝙡𝙡 𝙩𝙤𝙜𝙚𝙩𝙝𝙚𝙧:\n@WebSocketGateway({\n  cors: {\n    origin: [process.env[&#039;FRONTEND_HOST&#039;]],\n    credentials: true,\n  },\n  withCredentials: true,\n  cookie: true,\n  connectTimeout: 10_000,\n  namespace: WEBSOCKET_NAMESPACE.XYZ,\n})\nexport class WebSocketService implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(WebSocketService.name)\n \n  constructor(\n    private authService: AuthService,\n  ) {}\n \n  handleConnection(client: Socket, ...args: any[]): void | Socket {\n    if (typeof client.handshake.headers.cookie !== &#039;string&#039;) return client.disconnect(true)\n \n    const jwtPayload = this.authService.verifyJwt(parseCookieString(client.handshake.headers.cookie)[Cookies.ACCESS_TOKEN])\n    if (!jwtPayload) return client.disconnect(true)\n \n    this.logger.log(`#handleConnection ${client.id}`)\n  }\n \n  handleDisconnect(client: Socket) {\n    this.logger.log(`#handleDisconnect ${client.id}`)\n  }\n \n  @UseGuards(JwtCookiesWebsocketAuthGuard)\n  @UseFilters(new AllExceptionsWebsocketFilter())\n  @SubscribeMessage(WEBSOCKET_EVENT.XYZ)\n  async handleXYZEvent(@ConnectedSocket() client: Socket, @MessageBody() data: XYZWSInput) {\n    // logic...\n    client.emit(WEBSOCKET_EVENT.XYZ, response)\n  }\n}\n🛡️ 𝙎𝙩𝙖𝙮 𝙨𝙚𝙘𝙪𝙧𝙚 𝙖𝙣𝙙 𝙚𝙣𝙨𝙪𝙧𝙚 𝙤𝙣𝙡𝙮 𝙖𝙪𝙩𝙝𝙤𝙧𝙞𝙯𝙚𝙙 𝙪𝙨𝙚𝙧𝙨 𝙘𝙖𝙣 𝙖𝙘𝙘𝙚𝙨𝙨 𝙮𝙤𝙪𝙧 𝙉𝙚𝙨𝙩𝙅𝙎 𝙬𝙚𝙗𝙨𝙤𝙘𝙠𝙚𝙩𝙨! 🛡️\n𝙉𝙚𝙨𝙩𝙅𝙎𝙒𝙚𝙗𝙎𝙤𝙘𝙠𝙚𝙩𝙎𝙚𝙘𝙪𝙧𝙞𝙩𝙮𝘼𝙪𝙩𝙝𝙅𝙒𝙏𝘾𝙤𝙙𝙞𝙣𝙜"},"programing/tools/medusajs":{"title":"MedusaJS","links":[],"tags":["dev","medusaja","tool","ecommerce","opensource","free","stripe","nextjs"],"content":"A commerce platform with a built-in framework for customizations\nMedusaJS"},"programing/ui/animation-when-element-changes":{"title":"Animate HTML element when content changes","links":[],"tags":["dev","vuejs","animation","ts","ui"],"content":"The main ide is to animate table cell when the contane changes. Due to amount of cells i can’t use Custom Events. The sollution is to use Intersection Observer API to listen for childList change type and using changed element append css classes and listeners to remove after animation\nExample in VueJS (with Quasar library)\n&lt;template&gt;\n  &lt;q-card&gt;\n    &lt;q-table\n\t\t&lt;!-- ... --&gt;\n    &gt;\n\t\t\t&lt;!-- ... --&gt;\n      \t&lt;template v-slot:body-cell-orderBook_2=&quot;props&quot;&gt;\n\t\t\t\t\t&lt;q-td\n      \t    :props=&quot;props&quot;\n      \t    style=&quot;min-width: 30px; max-width: 30px&quot;\n      \t    class=&quot;coins-list__body-cell&quot;\n      \t    :class=&quot;selectedCoin?._id === props.row._id ? &#039;selected&#039; : &#039;&#039;&quot;\n      \t  &gt;\n      \t    &lt;div\n      \t      v-if=&quot;typeof props.value === &#039;number&#039;&quot;\n      \t      :data-sentiment=&quot;props.value &gt; 0 ? &#039;positive&#039; : props.value &lt; 0 ? &#039;negative&#039; : &#039;&#039;&quot;\n      \t      :style=&quot;{\n\t\t\t\t\t\t\t\tcolor:\n      \t          props.value &gt; 0\n      \t            ? `hsl(177, ${Math.abs(props.value * 100) + 50}%, 47%)`\n      \t            : props.value &lt; 0\n      \t              ? `hsl(323, ${Math.abs(props.value * 100) + 50}%, 75%)`\n      \t              : &#039;&#039;,\n      \t      }&quot;\n      \t    &gt;\n      \t      {{ props.value.toFixed(3) }}\n      \t    &lt;/div&gt;\n      \t    &lt;template v-else&gt;-&lt;/template&gt;\n      \t  &lt;/q-td&gt;\n      \t&lt;/template&gt;\n\t\t\t&lt;!-- ... --&gt;\n    &lt;/q-table&gt;\n  &lt;/q-card&gt;\n&lt;/template&gt;\n \n&lt;script lang=&quot;ts&quot;&gt;\nimport { useCoinsList } from &quot;src/composables/coins&quot;\nimport { watch, onMounted, onUnmounted, ref } from &quot;vue&quot;\nimport {\n  Coin,\n  CoinsUpdateData,\n  WEBSOCKET_EVENT,\n} from &quot;src/composables/coins/models&quot;\nimport { useCoinsWebSocket } from &quot;src/composables/coins/ws&quot;\n \nexport default {\n  name: &quot;CoinList&quot;,\n  emits: [&quot;onSelectCoin&quot;],\n  setup(props: any, { emit }: any) {\n    const {\n      coins,\n      scrollCoinsTargetRef,\n    } = useCoinsList()\n    const { connectSocket, waitUntilSocketConnected, unsubscribeFromCoinsUpdate, socket } =\n      useCoinsWebSocket()\n \n    const initObservers = () =&gt; {\n      const observerCallback: MutationCallback = (mutationsList) =&gt; {\n        for (const mutation of mutationsList) {\n          if (mutation.type !== &quot;childList&quot;) continue\n \n          const target = mutation.target.parentElement!\n          const sentiment = mutation.target?.sentiment\n \n          const className = `change_${sentiment}`\n          target.classList.add(className)\n          target.addEventListener(\n            &quot;animationend&quot;,\n            () =&gt; {\n              target.classList.remove(className)\n            },\n            { once: true },\n          )\n        }\n      }\n \n      const observer = new MutationObserver(observerCallback)\n \n      if (!scrollCoinsRef.value) {\n        return console.error(`#initObservers missing scrollCoinsRef`)\n      }\n \n      const table = scrollCoinsRef.value.$el\n      observer.observe(table, {\n        childList: true,\n        characterData: true,\n        subtree: true,\n      })\n    }\n \n    onMounted(async () =&gt; {\n      await connectSocket()\n      await waitUntilSocketConnected()\n      if (!socket.value) return\n \n      socket.value.emit(WEBSOCKET_EVENT.JOIN_COINS_UPDATE)\n      setTimeout(() =&gt; {\n        initObservers()\n      }, 2_000)\n \n      socket.value.on(WEBSOCKET_EVENT.COINS_UPDATE, ({ update }: { update: CoinsUpdateData }) =&gt; {\n        coins.value = coins.value.map((coin) =&gt; {\n          const updateForCoin = update[coin._id]\n          if (!updateForCoin) return coin\n          return { ...coin, ...updateForCoin }\n        })\n      })\n    })\n \n    onUnmounted(async () =&gt; {\n      await unsubscribeFromCoinsUpdate()\n    })\n \n    return {\n      coins,\n      scrollCoinsTargetRef,\n    }\n  },\n}\n&lt;/script&gt;\n \n&lt;style lang=&quot;scss&quot; scoped&gt;\n@keyframes fadeInPositive {\n  0% {\n    background-color: hsl(177, 93%, 47%, 20%);\n    color: black;\n  }\n  20% {\n    background-color: hsl(177, 93%, 47%, 60%);\n    color: black;\n  }\n  70% {\n    background-color: hsl(177, 93%, 47%, 60%);\n    color: black;\n  }\n  80% {\n    background-color: hsl(177, 93%, 47%, 20%);\n    color: black;\n  }\n}\n@keyframes fadeInNegative {\n  0% {\n    background-color: hsl(323, 100%, 75%, 20%);\n    color: black;\n  }\n  20% {\n    background-color: hsl(323, 100%, 75%, 60%);\n    color: black;\n  }\n  70% {\n    background-color: hsl(323, 100%, 75%, 60%);\n    color: black;\n  }\n  80% {\n    background-color: hsl(323, 100%, 75%, 20%);\n    color: black;\n  }\n}\n \n.change_positive {\n  animation: fadeInPositive 1.5s ease-in-out;\n}\n.change_negative {\n  animation: fadeInNegative 1.5s ease-in-out;\n}\n&lt;/style&gt;"},"trading/ai-alghoritms/cnn":{"title":"CNNs are excellent for image recognition tasks and can be trained to detect patterns in chart images.","links":[],"tags":["trading","cnn","ai","image-recognition"],"content":"CNNs are excellent for image recognition tasks and can be trained to detect patterns in chart images.\nGithub repository\nCreate CNN with Python\nAdvices and plan to create automated trading"},"trading/journal/journal-key-points":{"title":"Trading Jounar key-points","links":[],"tags":["trading","journal"],"content":"\nHow do you fell today ? Which emotions ?\nDocument every trade\n\nWhy I enter the trade ?\nWhy this posiotion size ?\nWhye SL and TP at this levels ?\nDo I follow trading, strategy rules ?\nIt was good trade /  bad trade ?\n\n\nMarket conditions\n\nIs it trending or consolidation\nIs it waiting for economic news or any news like ETF etc.\nIs there any others important macroeconomy conditions ? War etc. ?\n\n\nWhat I do bad/good today ?\nMoney isn’t a good set of gool, beter is winning ratio etc.\n"},"trading/journal/journal-template":{"title":"<SYMBOL> <LONG/SHORT>","links":[],"tags":["trading","journal"],"content":"Why Enter, was a good choise ?\nWhy this position size, was a good choise ?\nWhy SL, TP on this levels, was a good choise ?\nDid I follow trading rules ?\nWas is a good / bad trade ?\nDay suurond\nToday feelings\nLong-term trend\nSpecial economic news, announcements, macroeconomy conditions"},"trading/journal/mindset":{"title":"Trading mindset","links":[],"tags":["trading","journal"],"content":"\nMoney isn’t a good set of gool, better is winning ratio etc.\nNo position is also a having position, you don’t need be in trade all time.\n"},"trading/pine-script/introduction":{"title":"Use of PineScript from TradingView","links":[],"tags":["trading","pine-script","trading-view"],"content":"Great fast YT tutorial\ncreate plots, strategies, backtesitng\nAlternatives\nThis articel include alternatives to PineScript"},"trading/pine-script/notes":{"title":"Random notes related to PineScript","links":[],"tags":["trading","pine-script","trading-view"],"content":"var keyword\nuse var keyword to define veriable accessed in all bars.\nAccess previus data\nuse index to access previous data, for example close[1] to get previous close"},"trading/strategies/ai-and-supply-demand-zones":{"title":"Strategy which use AI indicator and zones","links":[],"tags":["trading","ai","suppply-demand-zone"],"content":"\nAdd supply and demand zones on the chart. Use indicator for it and also add myself using simple lines\n"},"trading/strategies/chandelier-exit":{"title":"Strategy which use Chandelier Exit","links":[],"tags":["trading","chandelier-exit","ema-trend-meter"],"content":"This indicator connections (adding ema-trend-meter) can imporve the signals. ema-trend-meter they should be all in the same colors for 2 timeframe and signal from the chandelier-exit should apper, then enter the posioton.\nPineScript of the ema-trend-meter:\n//version=5\nindicator(&quot;EMA Trend Meter&quot;)\nimport TradingView/ta/7\n\nlen1 = input(13, &#039;Length EMA1&#039;)\nlen2 = input(21, &#039;Length EMA1&#039;)\nlen3 = input(55, &#039;Length EMA1&#039;)\nK_ = input(3, &#039;Smooth K&#039;)\nD_ = input(3, &#039;Smooth D&#039;)\nL1 = input(14, &#039;RSI Length&#039;)\nL2 = input(14, &#039;STO Length&#039;)\n\nEMA0 = ta.ema(close, 1)\nEMA1 = ta.ema(close, len1)\nEMA2 = ta.ema(close, len2)\nEMA3 = ta.ema(close, len3)\n\n[a, b] = ta.stochRsi(L1, L2, K_, D_, close)\nBull1 = EMA1 &lt; EMA0\nBull2 = EMA2 &lt; EMA0\nBull3 = EMA3 &lt; EMA0\n\nplot(30, &#039;S_R&#039;, color = a &gt; b ? color.gray : a &lt; b ? color.black : na, linewidth=4, style=plot.style_circles)\nplot(20, &#039;EMA1&#039;, color = Bull1 ? color.green : color.red, linewidth=4, style=plot.style_circles)\nplot(10, &#039;EMA2&#039;, color = Bull2 ? color.green : color.red, linewidth=4, style=plot.style_circles)\nplot(0, &#039;EMA3&#039;, color = Bull3 ? color.green : color.red, linewidth=4, style=plot.style_circles)\n\n\nstrategies\n\nOne\nEnter when:\n\nema-trend-meter all colors are the same\nchandelier-exit is bullish\n\nTwo\nEnter when:\n\nchandelier-exit give buy signall\nema-trend-meter all colors are the same\n\nThree\nEnter when:\n\nchandelier-exit give buy signall\nema-trend-meter all colors are the same for 2 timeframes\n\nFour\nEnter when:\n\nema-trend-meter all colors are the same for 2 timeframes\nchandelier-exit is bullish\n\nFive\nAdd to all of the strategies\n\nsuplly-demand-zones add to avoid fast trend revers\n\nFor now don’t use dou too investing too much time in backtesting using PineScript\nOther settings\n"},"trading/tools/dev":{"title":"Tool for me as a developer","links":[],"tags":["trading","dev"],"content":"Here is a list of dev tools which can i use to develop tools which help me during trading.\nJavaScript library for indicators\nPython library to idnetify chart pattern"},"trading/tools/index":{"title":"Tool to use for trading","links":[],"tags":["trading"],"content":"The rest of your content lives here. You can use Markdown here :)\ntext"}}